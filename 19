import streamlit as st
import openai

# --- 공통: API Key 입력 ---
def get_openai_api_key():
    if "api_key" not in st.session_state:
        st.session_state.api_key = ""

    api_key = st.text_input("🔑 OpenAI API Key 입력", type="password", value=st.session_state.api_key)
    if api_key:
        st.session_state.api_key = api_key

    return api_key

# --- ChatGPT 응답 함수 ---
def get_chat_response(api_key, messages):
    openai.api_key = api_key
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4.0",  # GPT-4.1-mini는 일부 API에서는 지원 안될 수 있습니다
            messages=messages
        )
        return response.choices[0].message["content"]
    except Exception as e:
        return f"❌ 오류 발생: {e}"

# --- 페이지 구분 ---
page = st.sidebar.selectbox("📄 페이지 선택", ["Home", "Chat"])

# --- Home 페이지 ---
if page == "Home":
    st.title("🏠 GPT 웹앱")
    get_openai_api_key()
    st.write("왼쪽 사이드바에서 **Chat** 페이지로 이동해 대화를 시작하세요.")

# --- Chat 페이지 ---
elif page == "Chat":
    st.title("💬 GPT Chatbot")
    api_key = get_openai_api_key()

    if not api_key:
        st.warning("⚠️ 먼저 API Key를 입력하세요.")
        st.stop()

    # 메시지 저장 초기화 (초기 진입 시만)
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "system", "content": "You are a helpful assistant."}
        ]

    # Clear 버튼 기능
    if st.button("🧹 Clear"):
        st.session_state.messages = [
            {"role": "system", "content": "You are a helpful assistant."}
        ]
        st.experimental_rerun()

    # 대화 히스토리 출력
    for msg in st.session_state.messages[1:]:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # 사용자 메시지 입력
    if user_input := st.chat_input("메시지를 입력하세요..."):
        st.session_state.messages.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)

        # GPT 응답 받기
        response = get_chat_response(api_key, st.session_state.messages)
        st.session_state.messages.append({"role": "assistant", "content": response})
        with st.chat_message("assistant"):
            st.markdown(response)
